Consuming a RESTful Web Service

Dependency:
Spring Web

What you will build
    You will build an application that uses Spring's RestTemplate to retrieve a random Spring Boot quotation at http://localhost:8080/api/random

1) Fetching a REST Resource
    With project setup complete, you can create a simple application that consumes a RESTful service

    Before you can do so, you need a source of REST resources.
    We have provided an example of such a service at https://github.com/spring_guides/quoters
    You can run that application in a separate terminal and access the result at https://localhost:8080/api/random
    That address randomly fetches a quotation about Spring Boot and returns it as a JSON document.
    Other valid addresses include http://localhost:8080/api/(for all the quotations) and http://localhost:8080/api/1(for the first quotation), http://localhost:8080/api/2 (for the second quotation), and so on (up to 10 at present).

    If you request that URL through a web browser or curl, you receive a JSON document that looks something like this:
    {
       type: "success",
       value: {
          id: 10,
          quote: "Really loving Spring Boot, makes stand alone Spring apps easy."
       }
    }
    That is easy enough but not terribly useful when fetched through a browser or through curl

    A more useful way to consume a REST web service is programmatically
    To help you with that task, Spring provides a convenient template class called RestTemplate
    RestTemplate makes interacting with most RESTful services a one-line incantation
    And it can even bind that data to custom domain types

    First, you need to create a domain class to contain the data that you need
    The following listing shows the Quote class, which you can use as your domain class:

    This simple Java class has a handful of properties and matching getter methods
    It is annotated with @JsonIgnoreProperties from the Jackson JSON processing library to indicate that any properties not bound in this type should be ignored
    To directly bind your data to your custom types, you need to specify the variable name to be exactly the same as the key in the JSON document returned from the API
    In case your variable name and key in JSON doc do not match, you can use @JsonProperty annotation to specify the exact key of the JSON document (This example matches each variable name to a JSON key, so you do not need that annotation here)

    You also need an additional class, to embed the inner quotation itself
    The Value class fills that need and is shown in the following listing at Value.java

    This uses the same annotations but maps onto other data fields

2) Finishing the Application
    The Initalizr creates a class with a main() method
    The following listing shows the class the Initializr creates (at ConsumingRestApplication.java):

    Now you need to add a few other things to the ConsumingRestApplication class to get it to show quotations from our RESTful source
    You need to add:
    - A logger, to send output to the log(the console, in this example)
    - A RestTemplate, which uses the jackson JSON processing library to process the incoming data
    - A CommandLineRunner that runs the RestTemplate(and, consequently, fetches our quotation) on startup
    The following listing shows the finished ConsumingRestApplication class

3) Running the Application
    You can run the application from the command line with Gradle or Maven
    You should see output similar to the following but with a random quotation:
    2019-08-22 14:06:46.506  INFO 42940 --- [           main] c.e.c.ConsumingRestApplication           : Quote{type='success', value=Value{id=1, quote='Working with Spring Boot is like pair-programming with the Spring developers.'}}
    *If you see an error that reads,
    Could not extract response: no suitable HttpMessageConverter found for response type [class com.example.consumingrest.Quote],
     it is possible that you are in an environment that cannot connect to the backend service (which sends JSON if you can reach it). Maybe you are behind a corporate proxy.
     Try setting the http.proxyHost and http.proxyPort system properties to values appropriate for your environment.
4) Summary
    Congratulations! You have just developed a simple REST client by using Spring Boot

5) Error occured
        java.lang.IllegalStateException: Failed to execute CommandLineRunner
        check github
        https://github.com/spring-guides/quoters

